#include <stdio.h>
#include <stdlib.h>


typedef struct Node {
    int data;
    struct Node *left;
    struct Node *right;
} Node;


Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}


Node* insertNode(Node* root, int data) {
    if (root == NULL) {
        // If the tree is empty, create a new root node
        return createNode(data);
    }

   
    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else {
        root->right = insertNode(root->right, data);
    }
    return root;
}


void inorderTraversal(Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}


void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    Node* root = NULL;
    int value, choice;

    do {
        printf("Enter a value to insert into the binary tree: ");
        scanf("%d", &value);
        root = insertNode(root, value);

        printf("Do you want to insert another value? (1 = Yes, 0 = No): ");
        scanf("%d", &choice);
    } while (choice == 1);

    printf("In-order traversal of the binary tree: ");
    inorderTraversal(root);
    printf("\n");

  
    freeTree(root);

    return 0;
}
